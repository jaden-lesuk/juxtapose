{"version":3,"sources":["flux/actions/types.js","flux/reducers/PredictionReducer.js","flux/reducers/index.js","flux/store.js","flux/actions/PredictionActions.js","components/PredictionItem.js","components/Prediction.js","components/PredictForm.js","images/news.png","images/construct.png","images/claim.png","components/Home.js","components/layout/logo.png","components/layout/BootNavBar.js","components/Tweet.js","components/TwitterStream.js","App.js","reportWebVitals.js","index.js"],"names":["GET_PREDICTION","PREDICTION_RESULT","GET_TWEETS","initialState","predictions","tweets","predictionResult","combineReducers","prediction","state","action","type","payload","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","postPrediction","title","maintext","source","link","dispatch","axios","post","then","res","data","catch","err","console","log","colorMap","0","1","classMap","textMap","PredictionItem","this","props","text","Card","style","marginBottom","backgroundColor","borderLeft","Body","className","Text","substring","Button","variant","as","href","Component","Prediction","loading","currentPage","articlesPerPage","getPrediction","setState","Container","length","Spinner","animation","map","item","id","$oid","connect","get","PredictionForm","validate","onChange","e","target","name","value","onSubmit","a","preventDefault","Swal","fire","icon","Alert","bg","placeholder","rows","size","block","Footer","Home","Jumbotron","fluid","Row","Col","src","News","width","height","alt","Link","to","Construct","Claim","BootNavBar","Navbar","expand","sticky","Brand","Logo","Toggle","aria-controls","Collapse","Nav","Tweet","tweet","user","CardStyle","padding","TwitterStream","getTweets","App","styles","containerStyle","contentStyle","path","PredictForm","paddingLeft","paddingRight","minHeight","paddingTop","paddingBottom","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8a93179d.chunk.js","sourcesContent":["export const GET_PREDICTION = 'GET_PREDICTION';\nexport const PREDICTION_RESULT = 'PREDICTION_RESULT';\nexport const GET_TWEETS = 'GET_TWEETS';","import { GET_PREDICTION, PREDICTION_RESULT, GET_TWEETS } from '../actions/types'\n\nconst initialState = {\n    predictions: [],\n    tweets: [],\n    predictionResult: ''\n}\n\nexport default function Reducer( state=initialState, action ) {\n    switch (action.type) {\n        case GET_PREDICTION:\n            return {\n                ...state,\n                predictions: action.payload,\n            };\n\n        case PREDICTION_RESULT:\n            return {\n                ...state,\n                predictionResult: action.payload,\n            };\n\n        case GET_TWEETS:\n            return {\n                ...state,\n                tweets: action.payload,\n            };\n\n        default:\n            return state;\n    }\n}","import  { combineReducers } from 'redux';\nimport predictionReducer from './PredictionReducer';\n\nexport default combineReducers({\n    prediction: predictionReducer\n});","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n// import { composeWithDevTools } from 'redux-devtools-extension/developmentOnly';\n\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst store = createStore(rootReducer, initialState, compose(\n    applyMiddleware(...middleware)\n    // ,window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n));\n\nexport default store;","import axios from 'axios';\nimport { GET_PREDICTION, PREDICTION_RESULT, GET_TWEETS } from './types';\n\nexport const getPrediction = () => dispatch => {\n    return axios\n    .get('/api/v1/predictions')\n    .then(\n        res => {\n            console.log(res)\n            dispatch( {type: GET_PREDICTION, payload: res.data} )\n        }\n    )\n    .catch(\n        err => { console.log(err) }\n    )\n}\n\nexport const postPrediction = (title, maintext, source, link) => dispatch => {\n    return axios\n    .post('/api/v1/newprediction', {\n        title,\n        maintext,\n        source,\n        link\n    })\n    .then(\n        res => {\n            dispatch( {type: PREDICTION_RESULT, payload: res.data} )\n        }\n    )\n    .catch(\n        err => { console.log(err) }\n    )\n}\n\nexport const getTweets = () => dispatch => {\n    return axios\n    .get('/api/v1/tweets')\n    .then(\n        res => {\n            console.log(res)\n            dispatch( {type: GET_TWEETS, payload: res.data} )\n        }\n    )\n    .catch(\n        err => { console.log(err) }\n    )\n}","import React, { Component } from 'react'\nimport { Card, Button} from 'react-bootstrap';\n\nconst colorMap ={\n    0: \"#28a745\",\n    1: \"#dc3545\"\n}\n\nconst classMap ={\n    0: \"TRUE\",\n    1: \"FALSE\"\n}\n\nconst textMap = {\n    0: \"text-success\",\n    1: \"text-danger\"\n}\n\nexport default class PredictionItem extends Component {\n    render() {\n        const {source, link, title, text, prediction} = this.props.prediction\n        const color = '#495057'\n    \n        // #495057 #212529\n\n        return (\n            <Card style={{marginBottom: '3vh', backgroundColor:color, borderLeft:'solid 5px'+colorMap[prediction]}}   text=\"white\">\n                {/* <Card.Header className=\"h5 font-weight-bold\">\n                    \n                    \n                </Card.Header> */}\n                \n                <Card.Body>\n                    <div className=\"font-weight-bold\">\n                        <div className={`${textMap[prediction]}`}>\n                            {`${classMap[prediction]}`}\n                        </div>\n                    </div>\n                    <div className=\"h3\">{title}</div>\n                    \n                    <Card.Text className=\"text-justify\">{text.substring(0, 320)}...</Card.Text>\n                    {link===''?'': <Button variant = \"outline-light float-right\" as=\"a\" href={link}>Visit {source}</Button>}\n                    \n                    \n                </Card.Body>\n\n                {/* <Card.Footer className=\"h5 font-weight-bold\">\n                    Source: {source}\n                </Card.Footer> */}\n\n            </Card>\n        )\n    }\n}\n","import React, { Component } from 'react';\n\nimport { connect } from 'react-redux';\nimport { getPrediction } from '../flux/actions/PredictionActions';\nimport { postPrediction } from '../flux/actions/PredictionActions'\nimport { Spinner, Container } from 'react-bootstrap';\nimport PredictionItem from './PredictionItem';\n\n\nclass Prediction extends Component {\n    state = {\n        loading: true,\n        currentPage: 1,\n        articlesPerPage: 3\n    }\n\n    componentDidMount(){\n        this.props.getPrediction();\n        this.setState({loading:false});\n    }\n\n    render(){\n        const {predictions} = this.props.prediction;\n        return(\n            <Container>\n                {\n                    predictions.length === 0?\n                    <div className=\"text-center\"><Spinner animation=\"grow\" variant=\"light\" /></div>\n\n                    :  predictions.map( item => (<PredictionItem key={item.id.$oid} prediction={item} />)) \n                }\n                \n\n            </Container>\n                         \n            \n        )\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    prediction: state.prediction\n})\n\n\nexport default connect(mapStateToProps, {getPrediction, postPrediction})(Prediction);","import React, {Component} from 'react';\nimport { connect } from 'react-redux';\nimport { postPrediction } from '../flux/actions/PredictionActions';\nimport { Button, Card, Alert } from 'react-bootstrap';\nimport Swal from 'sweetalert2';\n\n\nconst colorMap ={\n    0: \"success\",\n    1: \"danger\"\n}\n\n\nclass PredictionForm extends Component {\n\n    state = {\n        source:'',\n        link: '',\n        title: '',\n        maintext: '',\n\n        prediction: '',\n    }\n    \n    validate = () => {\n        if(this.state.title === ''||this.state.text === ''){\n            return false;\n        }else{\n            return true;\n        }\n    }\n\n    onChange = (e) => {\n        this.setState({prediction: ''})\n        this.setState({ [e.target.name] : e.target.value })}\n\n    onSubmit = async (e) => {\n        e.preventDefault();\n        if (this.validate()){\n            this.setState({ source: '', link: '', title: '', maintext: ''})\n            await this.props.postPrediction(this.state.title,this.state.maintext, this.state.source, this.state.link);\n            this.setState({prediction: this.props.prediction.predictionResult})\n        }else{\n            Swal.fire({icon: 'error', title: 'Oops...', text: 'Please enter details'})\n        }\n    }\n\n    render(){\n        const articleTrue = \"This Article is allegedly TRUE\"\n        const articleFalse = \"This Article is allegedly FALSE\"\n\n        const formStyle = {\n            // padding: '3vh',\n        }\n\n\n        return(\n            \n\n            <div>\n            {\n                this.state.prediction === ''?\n                <Alert variant=\"info\">The Article Prediction will appear here</Alert>\n                :<Alert variant={`${colorMap[this.state.prediction]}`}>{this.state.prediction===0? articleTrue: articleFalse}</Alert>\n\n            }\n             \n            <Card  style={{backgroundColor:'#495057 ', marginBottom:'3vh'}} text=\"black\" bg=\"light\">\n                {/* <Card.Header as=\"h4\" className=\" font-weight-bold\" >News Article Form</Card.Header> */}\n                <Card.Body style={ formStyle }>\n                    <form  onSubmit={this.onSubmit} >\n                        <div className=\"mb-3\">\n                            <label className=\"form-label font-weight-bold\" >Source:</label>\n                            <input \n                                    type = \"text\"\n                                    name = \"source\"\n                                    className=\"form-control\"\n                                    placeholder = \"Add the source ...\"\n                                    value = {this.state.source}\n                                    onChange = { this.onChange }\n                                />\n                        </div>\n\n                        <div className=\"mb-3\">\n                            <label className=\"form-label font-weight-bold\" >Link:</label>\n                            <input \n                                    type = \"text\"\n                                    name = \"link\"\n                                    className=\"form-control\"\n                                    placeholder = \"Add the link ...\"\n                                    value = {this.state.link}\n                                    onChange = { this.onChange }\n                                />\n                        </div>\n\n                        <div className=\"mb-3\">\n                            <label className=\"form-label font-weight-bold\" >* Title:</label>\n                            <input \n                                    type = \"text\"\n                                    name = \"title\"\n                                    className=\"form-control\"\n                                    placeholder = \"Add the title ...\"\n                                    value = {this.state.title}\n                                    onChange = { this.onChange }\n                                />\n                        </div>\n\n                        <div className=\"mb-3\">\n                            <label className=\"form-label font-weight-bold\">* Text:</label>\n                            <textarea \n                                type = \"text\"\n                                name = \"maintext\"\n                                placeholder = \"Add the text ...\"\n                                className=\"form-control\"\n                                value = {this.state.maintext}\n                                onChange = { this.onChange }\n                                rows = {10}\n                            />\n                        </div>\n\n                        <Button variant=\"info\" type=\"submit\" size=\"md\" block>Predict</Button>\n                    </form>\n                </Card.Body>\n                <Card.Footer>\n                    <div>* required</div>\n                </Card.Footer>\n            </Card>\n            </div>\n        )\n    }\n}\n\n\nconst mapStateToProps = (state) => ({\n    prediction: state.prediction\n})\n\n\nexport default connect(mapStateToProps, {postPrediction})(PredictionForm);","export default __webpack_public_path__ + \"static/media/news.4c3fe1b6.png\";","export default __webpack_public_path__ + \"static/media/construct.24865279.png\";","export default __webpack_public_path__ + \"static/media/claim.c55f1590.png\";","import React from 'react';\nimport {Container, Jumbotron, Row, Col, Button} from 'react-bootstrap';\nimport {Link} from \"react-router-dom\";\nimport News from '../images/news.png';\nimport Construct from '../images/construct.png';\nimport Claim from '../images/claim.png';\n\nexport default function Home() {\n    return (\n        <div>\n            <Container>\n                <Jumbotron style={{backgroundColor:\"white\"}}>\n                    <Container fluid>\n                        <Row>\n                            <Col>\n                                <img src={News} width=\"300vw\" height=\"300vh\" alt=\"\" className=\"float-left\"/>\n                            </Col>\n\n                            <Col className=\"my-auto\">\n                                <div >\n                                    <h1>What is Juxtapose?</h1>\n                                    <p  className=\"text-left\">\n                                        Juxtapose is a proudly Kenyan automated fact checker that was built to combat fake news. Press the button below to use it...\n                                    </p>\n                                    <div className=\"text-center\"><Button variant=\"outline-dark\" as={Link} to=\"/newprediction\">Use Juxtapose</Button></div>\n                                </div>\n                            </Col>\n                        </Row>\n                    </Container>\n                </Jumbotron>\n            </Container>\n\n            <Container>\n                <Jumbotron style={{backgroundColor:\"white\"}}>\n                    <Container fluid>\n                        <Row>\n                            <Col className=\"my-auto\">\n                                <div >\n                                    <h1>How was it made?</h1>\n                                    <p  className=\"text-left\">\n                                        Juxtapose is built on top of an A.I. model that was fed on diet of fake and real news articles and learnt how to tell them apart.\n                                    </p>\n                                </div>\n                            </Col>\n                        \n                            <Col>\n                                <img src={Construct} width=\"300vw\" height=\"300vh\" alt=\"\" className=\"float-right\"/>\n                            </Col>\n\n                        </Row>\n                    </Container>\n                </Jumbotron>\n            </Container>\n\n            <Container>\n                <Jumbotron style={{backgroundColor:\"white\"}}>\n                    <Container fluid>\n                        <Row>\n                            <Col>\n                                <img src={Claim} width=\"300vw\" height=\"300vh\" alt=\"\" className=\"float-left\"/>\n                            </Col>\n\n                            <Col className=\"my-auto\">\n                                <div >\n                                    <h1>How are the articles labelled?</h1>\n                                    <p  className=\"text-left\">\n                                        Juxtapose uses the A.I. to label an article as either allegedly True or allegedly False.\n                                       \n                                    </p>\n                                </div>\n                            </Col>\n                        </Row>\n                    </Container>\n                </Jumbotron>\n            </Container>\n        </div>\n    )\n}\n\n","export default __webpack_public_path__ + \"static/media/logo.2b7f6c70.png\";","import React from 'react'\nimport {Link} from \"react-router-dom\";\nimport {Navbar, Nav, Container, Button} from 'react-bootstrap';\nimport Logo from './logo.png';\nimport {Twitter, HouseFill, CollectionFill} from 'react-bootstrap-icons';\n\nconst BootNavBar = () => {\n    return (\n        <Navbar bg=\"dark\" expand=\"lg\" variant=\"dark\" className=\"shadow\" sticky=\"top\"><Container>\n\n            <Navbar.Brand as = {Link} to = \"/\" style = {{'fontSize': 25, 'fontWeight': 'bold'}}>\n                <img alt=\"\" src={Logo} width=\"35\" height=\"35\" className=\"d-inline-block align-top\"/>\n                {'  '}\n                Juxtapose\n            </Navbar.Brand>\n            \n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n            <Navbar.Collapse id=\"basic-navbar-nav\" className=\"justify-content-end\">\n                <Nav className=\"ml-auto\" >\n                \n                    <Nav.Link as={Link} to=\"/\" style ={{'marginRight':'1vw'}} ><HouseFill/> Home</Nav.Link>\n                    <Nav.Link as={Link} to=\"/predictions\" style ={{'marginRight':'1vw'}}><CollectionFill /> Predictions</Nav.Link>\n                    <Nav.Link as={Link} to=\"/tweets\" style ={{'marginRight':'1vw'}}><Twitter/> Tweets</Nav.Link>\n                    <Button variant = \"outline-light\" as={Link} to=\"/newprediction\">Make a Prediction</Button>\n                </Nav>\n            </Navbar.Collapse>\n        </Container></Navbar>  \n    )\n}\n\nexport default BootNavBar\n","import React, { Component } from 'react'\n\nimport {Card} from 'react-bootstrap';\nimport {PersonCircle} from 'react-bootstrap-icons';\n\nconst colorMap ={\n    0: \"#28a745\",\n    1: \"#dc3545\"\n}\n\nconst classMap ={\n    0: \"TRUE\",\n    1: \"FALSE\"\n}\n\nconst textMap = {\n    0: \"text-success\",\n    1: \"text-danger\"\n}\n\nexport default class Tweet extends Component {\n    render() {\n        const {prediction, text, user} = this.props.tweet\n\n        const CardStyle = {\n            marginBottom: '3vh', \n            borderLeft:'solid 5px'+colorMap[prediction],\n            padding: '3vh',\n            // backgroundColor: '#1DA1F2',\n            \n        }\n\n        return (\n            <div>\n                <Card style={CardStyle} bg='light'>\n\n                    \n\n                    <div className=\"font-weight-bold\">\n                            <div className={`${textMap[prediction]}`}>\n                                {`${classMap[prediction]}`}\n                            </div>\n                    </div>\n                    <div className=\"h4 font-weight-bold\"><PersonCircle/> {user}</div>\n                    <Card.Text className=\"text-justify h6\">{text}</Card.Text>\n                </Card>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { getTweets } from '../flux/actions/PredictionActions';\nimport { Spinner, Container, Alert } from 'react-bootstrap';\n\nimport Tweet from './Tweet';\n\nclass TwitterStream extends Component {\n\n    state = {\n        loading: true\n    }\n\n    componentDidMount(){\n        this.props.getTweets();\n        this.setState({loading:false});\n    }\n\n    render() {\n        const {tweets} = this.props.prediction;\n        return (\n            <Container>\n                <Alert variant=\"info\">This is a livestream of tweets</Alert>\n                {\n                    tweets.length === 0?\n                    <div className=\"text-center\"><Spinner animation=\"grow\" variant=\"light\" /></div>\n\n                    :  tweets.map( item => (<Tweet key={item.id} tweet={item} />)) \n                }\n                \n\n            </Container>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    prediction: state.prediction\n})\n\n\nexport default connect(mapStateToProps, {getTweets})(TwitterStream);","import React, {Component} from 'react';\nimport { Provider } from 'react-redux';\nimport store from './flux/store';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport {Container} from 'react-bootstrap'\n\n\nimport Prediction from './components/Prediction';\nimport PredictForm from './components/PredictForm';\nimport Home from './components/Home';\nimport BootNavBar from './components/layout/BootNavBar';\nimport TwitterStream from './components/TwitterStream';\n\nclass App extends Component {\n\n  render() {\n    return (\n      <Provider store={store}>\n        <Router>\n          <Container fluid style={styles.containerStyle}>\n\n            <BootNavBar />\n\n\n            <div style={styles.contentStyle}>\n              <Switch>\n                <Route path=\"/predictions\">\n                  <Container fluid><Prediction /></Container>\n                </Route>\n\n                <Route path=\"/tweets\">\n                  <Container fluid><TwitterStream /></Container>\n                </Route>\n\n                <Route path=\"/newprediction\">\n                  <Container><PredictForm /></Container>\n                </Route>\n\n                <Route path=\"/\">\n                  <Home />\n                </Route>\n              </Switch>\n            </div>\n            \n          </Container> \n        </Router>\n      </Provider>\n    );\n  }\n  \n}\n\n//  #343a40\n\nconst styles = {\n  containerStyle: {\n      paddingLeft: 0,\n      paddingRight: 0,\n      backgroundColor: '#343a40',\n      minHeight: '100vh',\n  },\n\n  contentStyle: {\n    paddingTop: '3vh',\n    paddingBottom: '1vh'\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}